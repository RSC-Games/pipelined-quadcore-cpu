INSTRUCTION SET REVISION v1.1

CPU Type: Scalar Pipelined 32 bit RISC CPU.
Features: 
	MMU + MPU with full paging support; W^X support. Control is mostly handled in hardware and address translation is transparent to the CPU (hardware page walker).
	Has 16 general purpose registers (3 of them are ABI reserved)
	No out-of-order optimizations or no superscalar optimizations; pipelining implemented.
	1T memory access.
	Clocks range from 1 MHz-500 MHz on 4 SMP (Symmetric Multiprocessing) cores.
	Little Endian byte order (Most significant bytes are stored in highest memory addresses).

What is RISC? What is the alternative?
	CISC: (Complex Instruction Set Computing)
	- Add 2 arbitrary numbers from memory and store the result in R1.
		ADD DWORD_PTR[0xFF] DWORD_PTR[0xFA] r1

	RISC: (Reduced Instruction Set Computing)
	- Add 2 arbitrary numbers from memory and store the result in R1.
		MOV r0 0xFF
		LDW r1 r0
		MOV r0 0xFA
		LDW r2 r0
		ADD r1 r2 r1

Register file:
	Has 16 registers (numbered X0-X12 and XRV, XFP, XSP).
	Has 16 "extended" registers (numbered E0-E15).
	X0-X12 are general purpose registers. An ABI may make use of some of these for arguments.
	X13 is the return value register (XRV) (ABI specified, not required by hardware).
	X14 is the frame pointer (XFP) (ABI specified, not required by hardware).
	X15 is the stack pointer (XSP) (implemented in hardware; can't change).
	PC is the dedicated program counter (implemented in hardware).
	E0-E15 cannot directly be used by operations, and must be MOVed into X0-X15 to be used.
	EXC is the exception address register (faulting memory address for load/store faults).

	Register Layout:
	X0:  0x00000000    X1:  0x00000000    X2:  0x00000000	X3:  0x00000000
	X4:  0x00000000    X5:  0x00000000    X6:  0x00000000	X7:  0x00000000
	X8:  0x00000000    X9:  0x00000000    X10: 0x00000000	X11: 0x00000000
	X12: 0x00000000    XRV: 0x00000000    XFP: 0x00000000	XSP: 0x00000000
	E0:  0x00000000    E1: 	0x00000000	  E2:  0x00000000   E3:  0x00000000
	E4:  0x00000000    E5: 	0x00000000	  E6:  0x00000000   E3:  0x00000000
	E8:  0x00000000    E9: 	0x00000000	  E10: 0x00000000   E11: 0x00000000
	E12  0x00000000    E13:	0x00000000	  E14: 0x00000000   E15: 0x00000000
	PC:  0x00000000    EXC: 0x00000000

Instruction encoding:
	32 bit instruction word (long encoding)
		- No short encoding currently available
	8 bit instruction opcode
	24 bit operand

Instruction set:
0b00000000 - empty (illegal instruction when jumping to NOP sled to reduce attack surfaces or break infinite loops in empty memory. :D)
0b00000001 - ADD <SRC register 1/DEST register> <SRC register 2> (Adds and accumulates to 1 register)
0b00000010 - SUB <SRC register 1/DEST register> <SRC register 2> (Subtracts and accumulates to 1 register)
0b00000011 - MUL <SRC register 1/DEST register> <SRC register 2> (Multiply and accumulates to 1 register)
0b00000100 - DIV <SRC register 1/DEST register> <SRC register 2> (Adds and accumulates to 1 register)
0b00000101 - empty (ADD_FP (no accumulate instruction here))
0b00000110 - empty (SUB_FP (no accumulate instruction here))
0b00000111 - empty (MUL_FP (no accumulate instruction here))
0b00001000 - empty (DIV_FP (no accumulate instruction here))
0b0000XXXX - empty
0b00010000 - AND <SRC register 1/DEST register> <SRC register 2> (Perform bitwise AND on two registers and store the result in dest)
0b00010001 - OR <SRC register 1/DEST register> <SRC register 2> (Perform bitwise OR on two registers and store the result in dest)
0b00010010 - XOR <SRC register 1/DEST register> <SRC register 2>(Perform bitwise XOR on two registers and store the result in dest)
0b00010011 - NOT <SRC register/DEST register> (Perform bitwise NOT on the source register)
0b00010100 - MOV <DEST register> <SRC register> (Moves one register value to another without clearing the source)
0b00010101 - MOV_IMM <DEST register> <20 bit immediate> (Move a specified immediate value into a provided register)
0b00010110 - MOV_IMM_HIGH <DEST register> <16 bit immediate> (Move a specified immediate value into the 2 high bytes of a register)
0b00010111 - MOV_EXT <DEST EXT register> <SRC GP register>  (Move one general-purpose register value to an extended register).
0b00011000 - MOV_GP <DEST GP register> <SRC EXT register> (Move one extended register value to a general-purpose register).
0b00011001 - MOV_EXT2 <DEST EXT register> <SRC EXT register> (Move one extended register value to another extended register).
0b0001XXXX - empty
0b00100000 - LDB <DEST register> <BASE_ADDR register> <OFFSET register> (Load a byte from memory at the address register value, left shift it the given amount, then store it into the given register, overwriting all bits present at that offset. Must be byte aligned)
0b00100001 - STB <SRC register> <BASE_ADDR register> <OFFSET register> (Store a byte to memory at the address register value. Right shift the byte, keep only the lowest byte, and write it to memory.)
0b00100010 - LD <DEST register> <BASE_ADDR register> <OFFSET register> (Load a machine word)
0b00100011 - ST <SRC register> <BASE_ADDR register> <OFFSET register> (Store a machine word)
0b00100XXX - empty
0b00101000 - LSH <OPERAND register> <SHIFT register> (Left shifts the source register by a value in the shift register)
0b00101001 - LSH_IMM <OPERAND register> <20 bit immediate> (Left shifts the provided register by an immediate)
0b00101010 - RSH <OPERNAD register> <SHIFT register> (Right shifts the provided register by a value in another register)
0b00101011 - RSH_IMM <OPERAND register> <20 bit immediate> (Right shifts the provided register by an immediate)
0b00101XXX - empty
0b00110000 - JMP_IMM <BASE_ADDR register> <20 bit immediate> (For small code sizes allows extremely fast jumps within a megabyte above the provided address register)
0b00110001 - JMP_REL <BASE_ADDR register> <OFFSET register> (Jump to an offset relative to the provided address register)
0b00110010 - JMP <ADDRESS register> (Jump to an absolute address in the memory space from the provided register)
0b00110011 - JMPC <3 bit conditional code> <OPERAND register 1> <OPERAND register 2> <BASE_ADDR register> <OFFSET register> (Jump conditionally. Codes include EQ, LT, GT, LE, GE, NE. Compare 2 operands with this and if the condition is met, jump to the absolute address in the provided register)
0b00110100 - JMPC_Z <1 bit conditional code> <OPERAND register> <BASE_ADDR register> <OFFSET register> (Jump conditionally. Codes include NZ (NOT ZERO), ZR (ZERO). Compare the operand with 0, and if the condition is met, jump to the absolute address in the provided register)
0b00110XXX - empty
0b00111000 - CALL_IMM <BASE_ADDR register> <20 byte immediate> (Push the PC to the stack, then jump to the function specified at the address + the immediate offset)
0b00111001 - CALL <BASE_ADDR register> <OFFSET register> (Push the PC to the stack, then jump to the address in the address register + the offset register)
0b00111010 - RET (Pop the PC from the stack)
0b00111011 - PUSH <SRC register> (Push a provided register to the stack)
0b00111100 - POP <DEST register> (Pop the entry on the stack into the provided register)
0b00111101 - PUSH_EXT <SRC EXT register> (Push an extended register to the stack)
0b00111110 - POP_EXT <DEST EXT register> (Pop the entry on the stack into the extended register)
0b00111111 - empty
0b01000000 - SYSCALL <ID register> (Push the PC to the stack, switch to Kernel mode, then jump to the registered syscall handler)
0b01000001 - $P0 ONLY$ - SYSRET (Switch to User mode and pop the PC from the stack)
0b01000010 - $P0 ONLY$ - HLT (Halt the CPU. May be unhalted by any active interrupts)
0b01000011 - CPUID <DEST register> (Get the 32 bit CPU ID info and store it in the dest register)
************************** NOTE: CURRENTLY USED 42/255 opcodes available in the 8-bit encoding. *************************

Virtual instructions (aren't actually implemented as hardware but are aliases):
NOP -> LSH X0 0


Instruction Encoding:
Encoding is as follows: 
	0bNN - Instruction
	0bSS - SREG (Source register)
	0bDD - DREG (Destination register)
	0bAA - AREG (Base address register)
	0bFF - OFREG (Offset register)
	0bEE - EREG (Extended register)
	0bPP - OPREG (Operand register)
	0bHH - SHREG (Shift amount register)
	0bII - Immediate
	0bCC - Conditional code
	0bXX - IDREG (CPUID register)
	0b-- - Unused

				BYTE 1 (INSTR)		BYTE 2			BYTE 3			BYTE 4		ENCODED:
ADD: 			0bXXXXXXXX  		SREG1/2(8b)		0x0				0x0			0bNNNNNNNN SSSSSSSS -------- --------
SUB:			0bXXXXXXXX			SREG1/2(8b)		0x0				0x0			0bNNNNNNNN SSSSSSSS -------- --------
MUL:			0bXXXXXXXX			SREG1/2(8b)		0x0				0x0			0bNNNNNNNN SSSSSSSS -------- --------
DIV: 			0bXXXXXXXX			SREG1/2(8b)		0x0				0x0			0bNNNNNNNN SSSSSSSS -------- --------
ADD_FP			0bXXXXXXXX			0x0				0x0				0x0			0bNNNNNNNN -------- -------- --------
SUB_FP			0bXXXXXXXX			0x0				0x0				0x0			0bNNNNNNNN -------- -------- --------
MUL_FP			0bXXXXXXXX 			0x0				0x0				0x0			0bNNNNNNNN -------- -------- --------
DIV_FP			0bXXXXXXXX 			0x0				0x0				0x0			0bNNNNNNNN -------- -------- --------
AND 			0bXXXXXXXX 			SREG1/2(8b)		0x0 			0x0			0bNNNNNNNN SSSSSSSS -------- --------
OR 				0bXXXXXXXX	   		SREG1/2(8b)		0x0 			0x0			0bNNNNNNNN SSSSSSSS -------- --------
XOR 			0bXXXXXXXX	   		SREG1/2(8b)		0x0 			0x0			0bNNNNNNNN SSSSSSSS -------- --------
NOT 			0bXXXXXXXX	   		SREG(4b)		0x0				0x0			0bNNNNNNNN SSSS---- -------- --------
MOV				0bXXXXXXXX			DREG/SREG(8b)	0x0				0x0			0bNNNNNNNN DDDDSSSS -------- --------
MOV_IMM 		0bXXXXXXXX 			DREG/IMM(4b)	IMM(8b)			IMM(8b)		0bNNNNNNNN DDDDIIII IIIIIIII IIIIIIII
MOV_IMM_HIGH	0bXXXXXXXX			DREG(4b)/empty	IMM(8b)			IMM(8b)		0bNNNNNNNN DDDD---- IIIIIIII IIIIIIII
MOV_EXT			0bXXXXXXXX 			EREG/SREG(8b)	0x0				0x0			0bNNNNNNNN EEEESSSS -------- --------
MOV_GP			0bXXXXXXXX			SREG/EREG(8b)	0x0				0x0			0bNNNNNNNN SSSSEEEE -------- --------
MOV_EXT2		0bXXXXXXXX			SEREG/DEREG(8b)	0x0				0x0			0bNNNNNNNN EEEEEEEE -------- --------
LDB				0bXXXXXXXX 			DREG/AREG(8b)	OFREG(4b)		0x0			0bNNNNNNNN DDDDAAAA FFFF---- --------
STB				0bXXXXXXXX			SREG/AREG(8b)	OFREG(4b)		0x0			0bNNNNNNNN SSSSAAAA FFFF---- --------
LD				0bXXXXXXXX			DREG/AREG(8b)	OFREG(4b)		0x0			0bNNNNNNNN DDDDAAAA FFFF---- --------
ST				0bXXXXXXXX 			SREG/AREG(8b)	OFREG(4b)		0x0 		0bNNNNNNNN SSSSAAAA FFFF---- --------
LSH 			0bXXXXXXXX     		OPREG/SHREG(8b)	0x0				0x0			0bNNNNNNNN PPPPHHHH -------- --------
LSH_IMM 		0bXXXXXXXX     		OPREG/IMM(4b)	IMM(8b)			IMM(8b)     0bNNNNNNNN PPPPIIII IIIIIIII IIIIIIII
RSH 			0bXXXXXXXX     		OPREG/SHREG(8b)	0x0				0x0			0bNNNNNNNN PPPPHHHH -------- --------
RSH_IMM 		0bXXXXXXXX     		OPREG/IMM(4b)	IMM(8b)			IMM(8b)		0bNNNNNNNN PPPPIIII IIIIIIII IIIIIIII
JMP_IMM			0bXXXXXXXX     		AREG/IMM(4b)	IMM(8b)			IMM(8b)		0bNNNNNNNN AAAAIIII IIIIIIII IIIIIIII
JMP_REL 		0bXXXXXXXX     		AREG/OFREG(8b)	0x0				0x0			0bNNNNNNNN AAAAFFFF -------- --------
JMP 			0bXXXXXXXX     		AREG(4b)/empty	0x0				0x0			0bNNNNNNNN AAAA---- -------- --------
JMPC 			0bXXXXXXXX     		CC(4b)/OPREG1	OPREG2/AREG		OFREG(4b)	0bNNNNNNNN -CCCPPPP PPPPAAAA FFFF----
JMPC_Z 			0bXXXXXXXX     		CC(4b)/OPREG	AREG/OFREG		0x0			0bNNNNNNNN ---CPPPP AAAAFFFF --------
CALL_IMM 		0bXXXXXXXX     		AREG/IMM(4b)	IMM(8b)			IMM(8b)		0bNNNNNNNN AAAAIIII IIIIIIII IIIIIIII
CALL 			0bXXXXXXXX     		AREG/OFREG		0x0				0x0			0bNNNNNNNN AAAAFFFF -------- --------
RET 			0bXXXXXXXX			0x0				0x0				0x0			0bNNNNNNNN -------- -------- --------
PUSH 			0bXXXXXXXX     		SREG(4b)/empty	0x0				0x0			0bNNNNNNNN SSSS---- -------- --------
POP 			0bXXXXXXXX     		DREG(4b)/empty	0x0				0x0			0bNNNNNNNN DDDD---- -------- --------
PUSH_EXT		0bXXXXXXXX			EREG(4b)		0x0				0x0 		0bNNNNNNNN EEEE---- -------- --------
POP_EXT			0bXXXXXXXX			EREG(4b)		0x0				0x0 		0bNNNNNNNN EEEE---- -------- --------
SYSCALL 		0bXXXXXXXX     		IDREG(4b)/empty	0x0				0x0			0bNNNNNNNN XXXX---- -------- --------
SYSRET 			0bXXXXXXXX			0x0				0x0				0x0			0bNNNNNNNN -------- -------- --------
HLT 			0bXXXXXXXX 			0x0				0x0				0x0			0bNNNNNNNN -------- -------- --------
CPUID 			0bXXXXXXXX     		DREG(4b)/empty	0x0				0x0			0bNNNNNNNN DDDD---- -------- --------

Instruction decode types:
	INSTR_ONLY: (no operands).
		- ADD_FP, SUB_FP, MUL_FP, DIV_FP, RET, SYSRET, HLT
	INSTR_5REG: (5 register operands):
		- JMPC
	INSTR_4REG: (4 register operands; technically just 4-bit operands at the hw level).
		- JMPC_Z
	INSTR_3REG: (3 register operands).
		- LDB, STB, LD, ST
	INSTR_2REG: (2 register operands).
	    - ADD, SUB, MUL, DIV, AND, OR, XOR, MOV, MOV_EXT, MOV_GP, MOV_EXT2, LSH, RSH, JMP_REL, CALL
	INSTR_1REG: (1 register operand).
		- NOT, JMP, PUSH, POP, PUSH_EXT, POP_EXT, SYSCALL, CPUID
	INSTR_REG_IMM: (1 register, 1 20-bit immediate).
		- MOV_IMM, LSH_IMM, RSH_IMM, JMP_IMM, CALL_IMM
	INSTR_2REG_IMM: (2 register, 1 16-bit immediate).
		- MOV_IMM_HIGH


CPU Pipeline:
	4 Stage pipeline:
	- Instruction Fetch
	- Instruction Decode
	- Execute
	- Data Writeback

Virtual Memory Address Space Layout:
	0x00000000 - 0x00003EFF: Not memory mapped for illegal address trapping. Only accessible in kernel mode.
	0x00003F00 - 0x00007EFF: CPU Control Registers. Only accessible in kernel mode.
	0x00007F00 - 0x00007FFF: Interrupt Vector Table (For exceptions and interrupts). Only accessible in kernel mode.
	0x00008000 - 0xFFFF5FFF: Program memory space (stack starts at the high end of memory, at 0xFFFF5FFF, and grows down). Accessible in Kernel or User mode.
	0xFFFF6000 - 0xFFFFDFFF: Memory-mapped I/O. Allows direct memory access to certain registers instead of through I/O space. Only accessible in kernel mode
	0xFFFFE000 - 0xFFFFFFFF: Memory mapped ROM code space. Max space is 128 kB. CPU hardwired to start in this address region (PC@0xFFFFFFFB). Only accessible in kernel mode; may be unmapped after boot.

CPU Operation Modes:
	P0 (Privilege level 0): Kernel mode; automatically entered on syscall/sysret.
	P1 (Privilege level 1): User mode; applications run in this mode.

CPU Branch predictor:
	Features a full branch predictor / branch target buffer solution to avoid pipeline stalls.
	Branch Predictor:
		- 2 level adaptive (stores last 8 branches)
		- On the execute stage of the pipeline, the branch history is left shifted by 1 bit and
			the branch output of the current branch instruction is XOR'd in.

		- In the fetch stage, if the input is a branch instruction, the direction the branch will go
			is predicted from a unique 2 bit saturation counter for that branch instruction type.
		- If the branch is predicted as taken, the PC of the branch will be used to look up the target.
			If no entry exists (entry == nullptr), the pipeline fetch stage will stall until the instruction 
			is decoded and the target can be identified.

CPU Exceptions (All NMI Interrupts) (All execute in kernel mode):
	- LoadFault (Failure to load a value from a given address).
	- StoreFault (Failure to store a value to a given address).
	- PageFault (Page table walk didn't yield page).
	- InvalidPageFault (Page mapped doesn't exist).
	- LoadStoreAlignmentFault (Unaligned address for word on 32 bit boundaries).
	- InvalidOpcodeFault (The instruction specified is not a legal or recognized instruction).
	- InstrFetchAlignmentFault (Unaligned address for instruction fetch (must be on 32 bit boundaries)).
	- InstructionFetchFault (Failure to fetch an instruction for execution).	
	- ZeroDivisionFault (Cannot perform integer division by zero).
	- DoubleFault (An exception occurs when trying to load a previous exception handler).
	- (No IVT allocation) TripleFault (Another exception occurs when trying to load the DoubleFault handler).

CPU Exceptions (Developer guide):
	- LoadFault:
		- Caused by an illegal read from physical memory outside of any mmapped addresses (Only seen before MMU is up).
	- StoreFault:
		- Caused by an illegal write to physical memory outside of any mmapped addresses (Only seen before MMU is up).
	- PageFault:
		- Caused by an access to a page that does not exist in memory or was not mmapped (no page table entry).
	- InvalidPageFault:
		- The memory mapped page accessed does not exist in readable memory.
	- LoadStoreAlignmentFault:
		- A word-based load/store was not done on a 32-bit aligned address.
	- InvalidOpcodeFault:
		- Illegal instruction. The instruction read is not executable.

CPU Interrupts: (Exceptions are literally just interrupts but indicate an error) (All execute in kernel mode).
	- WDT_EXPIRED (NMI) (The watch dog timer expired and fired an interrupt prior to reset).
	- IRQL0 (Interrupt Request Line 0 was fired and IRQL0 is defined in the Control Registers).
	- IRQL1 (Interrupt Request Line 1 was fired and IRQL1 is defined in the Control Registers).
	- IRQL2 (Same as above)
	- IRQL3
	- OS_TIMER_TRIGGER (OS Timer counter expires for the next context switch).
	- TIM0_COMP (Timer 0's counter hits the threshold set in the TIMER_0_CNTR_THRESH register).
	- TIM1_COMP (Timer 1's counter hits the threshold set in the TIMER_1_CNTR_THRESH register).
	- TIM2_COMP (Same as above).
	- TIM3_COMP
	????????????????????????????????????? vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv ????????????????????????????????????????????
	- DMA_COMPLETE (The DMA controller has finished the transfer requested).
	- UART0_RX_BUFFER_FULL (UART0's receive buffer is full).
	- UART0_TX (UART0 is ready to send a byte on the serial channel).
	- UART1_RX (UART1 received a byte on the serial channel).
	- UART1_TX (UART1 is ready to send a byte on the serial channel).
	????????????????????????????????????? ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ????????????????????????????????????????????

Interrupt Vector Table: (This is where the CPU jumps when an interrupt occurs).
	IDT+0x00: (4 Bytes): LoadFault (Install handler here)
	IDT+0x04: (4 Bytes): StoreFault
	IDT+0x08: (4 Bytes): PageFault
	IDT+0x0C: (4 Bytes): InvalidPageFault
	IDT+0x10: (4 Bytes): LoadStoreAlignmentFault
	IDT+0x14: (4 Bytes): InvalidOpcodeFault
	IDT+0x18: (4 Bytes): InstructionFetchFault
	IDT+0x1C: (4 Bytes): InstrFetchAlignmentFault
	IDT+0x20: (4 Bytes): ZeroDivisionFault
	IDT+0x24: (4 Bytes): DoubleFault
	IDT+0x28: (4 Bytes): WDT_EXPIRED
	IDT+0x2C: (4 Bytes): IRQL0
	IDT+0x30: (4 Bytes): IRQL1
	IDT+0x34: (4 Bytes): IRQL2
	IDT+0x38: (4 Bytes): IRQL3
	IDT+0x3C: (4 Bytes): OS_TIMER_TRIGGER
	IDT+0x40: (4 Bytes): TIM0_COMP
	IDT+0x44: (4 Bytes): TIM1_COMP
	IDT+0x48: (4 Bytes): TIM2_COMP
	IDT+0x4C: (4 Bytes): TIM3_COMP
	...
	IDT+0xFF: (X Bytes): End of table. Data + Text region begins at the next byte.

CPU Control Registers (CR_BASE=0x3F00) (Can only be accessed in kernel mode).
    CPU Internal:
    - CR_BASE+0x0000: SYS_DCLK (1 Byte): Prescaler rate. Divide the base clock by powers of 2. (Max value div 16)
    - CR_BASE+0x0001: CORE_XCLK (1 Byte): Multiplier rate. Set the prescaled bus clock multiplier for the CPU. (Max value x8)
    - CR_BASE+0x0002: CORE_INTR (4 Bytes): Allow interrupts globally and disable specific interrupts. (NMI may always fire).
    - CR_BASE+0x0003-0x003F (RESERVED FOR CORE USAGE).

	CPU (other core access; only available on Core 0):
	- CR_BASE+0x0040: CPU1_BOOT_ADDR (4 Bytes): Core 1's initial boot address when powered on.
	- CR_BASE+0x0044: CPU2_BOOT_ADDR (4 Bytes): Core 2's initial boot address when powered up.
	- CR_BASE+0x0048: CPU3_BOOT_ADDR (4 Bytes): Core 3's initial boot address when powered on.
	- CR_BASE+0x0040: CORE_FLAGS (1 Byte): CPU core power state flags.

	MMU:
	- 

	MPU:
	- 

    DMA:
    - ???: DMA_READY (1 Byte): Has the DMA Controller finished the last transaction.
    - ???: RESERVED
    - ???: DMA_SRC_ADDRESS (4 Bytes): DMA transaction source address.
    - ???: DMA_DEST_ADDRESS (4 Bytes): DMA transaction destination address.
    - ???: DMA_COPY_LEN (4 Bytes): DMA transaction length.

    UART0: (May also be DMA'd).
    - ???: UART0_RX_AVAIL (1 Byte): Is there any data available to read from the UART RX buffer.
    - ???:

	UART1: (May also be DMA'd).
	- ???
	- ???

	SPI0: (May also be DMA'd).

	SPI1:

	I2C:

	NAND CONTROLLER:

	WDT:

	ETHERNET:

MMU + MPU:
	- Multi-level paging?
	- This will require much more dev resources before it's ready. Currently the core is the only part ready.

Testbed implementation SoC:
	Has 4 CPU cores (ranging from 1 MHz to 512 MHz)
	Contains 2 UART tranceivers
	Contains 2 SPI controllers
	Contains 1 I2C bus
	Contains 1 32 GB NAND (proprietary)
	Contains a basic WDT
	Contains one DMA Channel
	Contains one Ethernet NIC.
	Contains 4 GB 1T-DRAM (Accessible at 0x00008000 - 0xFFFF5FFF)
	Base clock crystal is 16 MHz.